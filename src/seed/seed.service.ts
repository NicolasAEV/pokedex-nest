import { Injectable } from '@nestjs/common';
import { PokeResponse } from './interfaces/poke-response.interface';
import { Pokemon } from 'src/pokemon/entities/pokemon.entity';
import { Model } from 'mongoose';
import { InjectModel } from '@nestjs/mongoose';
import { AxiosAdapter } from 'src/common/adapters/axios.adapter';


@Injectable()
export class SeedService {


  constructor(  
  @InjectModel(Pokemon.name)
  private readonly pokeModel:Model<Pokemon>,  private readonly http:AxiosAdapter,){
  
  } 


   //otra opciones es realizar un solo insert
  async executeSeed() {
    await this.pokeModel.deleteMany({});

    const data  = await this.http.get<PokeResponse>('https://pokeapi.co/api/v2/pokemon?limit=50');

    const pokemonToInsert = [] ;

     data.results.forEach(async ({name,url})=>{

      const segments = url.split('/');
      const no:number = +segments[segments.length - 2];

      // const pokemon = await this.pokeModel.create({name,no});
      pokemonToInsert.push(this.pokeModel.create({name,no}))

    })
    await this.pokeModel.insertMany({pokemonToInsert});

    return `execute Seed`;
    // return data.results;

  }
// Generated by https://quicktype.io
 // una opcion para no generar un insert cada vez que quiera crear un pokemon es realizarlo como compresa
  // async executeSeed() {
  //   await this.pokeModel.deleteMany({});

  //   const { data } = await axios.get<PokeResponse>('https://pokeapi.co/api/v2/pokemon?limit=50');

  //   const insertPromisesArray = [] ;

  //    data.results.forEach(async ({name,url})=>{

  //     const segments = url.split('/');
  //     const no:number = +segments[segments.length - 2];

  //     // const pokemon = await this.pokeModel.create({name,no});
  //     insertPromisesArray.push(this.pokeModel.create({name,no}))

  //   })
  //   const newArray = await Promise.all(insertPromisesArray);

  //   return `execute Seed`;
  //   // return data.results;

  // }// Generated by https://quicktype.io


}